{"version":3,"sources":["components/Todo.js","components/NewTodoForm.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","state","isEditing","task","handleRemove","bind","toggleForm","handleUpdate","handleChange","handleToggle","e","this","setState","target","name","value","removeTodo","id","preventDefault","updateTodo","toggleTodo","onSubmit","type","onChange","onClick","className","completed","Component","NewTodoForm","handleSubmit","createTodo","uuid","htmlFor","placeholder","TodoList","todos","create","remove","update","toggleCompletion","filter","todo","newTodo","updatedTask","updatedTodos","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e54d95e4.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Todo.css'\n\nclass Todo extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isEditing: false,\n      task: this.props.task\n    }\n    this.handleRemove = this.handleRemove.bind(this)\n    this.toggleForm = this.toggleForm.bind(this)\n    this.handleUpdate = this.handleUpdate.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.handleToggle = this.handleToggle.bind(this)\n  }\n\n  handleChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n\n  handleRemove() {\n    this.props.removeTodo(this.props.id)\n  }\n\n  toggleForm() {\n    this.setState({ isEditing: !this.state.isEditing })\n  }\n\n  handleUpdate(e) {\n    e.preventDefault()\n    this.props.updateTodo(this.props.id, this.state.task)\n    this.setState({ isEditing: false })\n  }\n\n  handleToggle() {\n    this.props.toggleTodo(this.props.id)\n  }\n\n  render() {\n    let result\n    if (this.state.isEditing) {\n      result = (\n        <div>\n          <form onSubmit={this.handleUpdate}>\n            <input\n              type='text'\n              value={this.state.task}\n              name='task'\n              onChange={this.handleChange}\n            />\n            <button>Save</button>\n          </form>\n        </div>\n      )\n    } else {\n      result = (\n        <div>\n          <button onClick={this.toggleForm}>Edit</button>\n          <button onClick={this.handleRemove}>X</button>\n          <li\n            className={this.props.completed && 'completed'}\n            onClick={this.handleToggle}>\n            {this.props.task}\n          </li>\n        </div>\n      )\n    }\n\n    return result\n  }\n}\n\nexport default Todo\n","import React, { Component } from 'react'\nimport uuid from 'uuid/v4'\n\nclass NewTodoForm extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { task: '' }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  handleChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n\n  handleSubmit(e) {\n    e.preventDefault()\n    this.props.createTodo({ ...this.state, id: uuid() })\n    this.setState({ task: '' })\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label htmlFor='task'>New Todo</label>\n        <input\n          type='text'\n          placeholder='New Todo'\n          id='task'\n          name='task'\n          value={this.state.task}\n          onChange={this.handleChange}\n        />\n        <button>Add Todo</button>\n      </form>\n    )\n  }\n}\n\nexport default NewTodoForm\n","import React, { Component } from 'react'\nimport Todo from './Todo'\nimport NewTodoForm from './NewTodoForm'\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { todos: [] }\n    this.create = this.create.bind(this)\n    this.remove = this.remove.bind(this)\n    this.update = this.update.bind(this)\n    this.toggleCompletion = this.toggleCompletion.bind(this)\n  }\n\n  remove(id) {\n    this.setState({\n      todos: this.state.todos.filter(todo => todo.id !== id)\n    })\n  }\n\n  create(newTodo) {\n    this.setState({\n      todos: [...this.state.todos, newTodo]\n    })\n  }\n\n  update(id, updatedTask) {\n    const updatedTodos = this.state.todos.map(todo => {\n      if (todo.id === id) {\n        return { ...todo, task: updatedTask }\n      }\n      return todo\n    })\n    this.setState({ todos: updatedTodos })\n  }\n\n  toggleCompletion(id) {\n    const updatedTodos = this.state.todos.map(todo => {\n      if (todo.id === id) {\n        return { ...todo, completed: !todo.completed }\n      }\n      return todo\n    })\n    this.setState({ todos: updatedTodos })\n  }\n\n  render() {\n    const todos = this.state.todos.map(todo => {\n      return (\n        <Todo\n          key={todo.id}\n          task={todo.task}\n          id={todo.id}\n          completed={todo.completed}\n          removeTodo={this.remove}\n          updateTodo={this.update}\n          toggleTodo={this.toggleCompletion}\n        />\n      )\n    })\n    return (\n      <div>\n        <h1>Todo List</h1>\n        <NewTodoForm createTodo={this.create} />\n        <ul>{todos}</ul>\n      </div>\n    )\n  }\n}\n\nexport default TodoList\n","import React from 'react'\nimport './App.css'\nimport TodoList from './components/TodoList'\n\nfunction App() {\n  return (\n    <div className='App'>\n      <TodoList />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}